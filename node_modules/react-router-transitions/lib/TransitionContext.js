'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _LocationUtils = require('./LocationUtils');

var _HistoryActions = require('./HistoryActions');

var _TransitionActions = require('./TransitionActions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint react/no-multi-comp:  0 */


/**
 * TransitionContext used to share global methods accross
 * all the application.
 * This context is designed to be rendered just before the RouterContext.
 */
var TransitionContext = function (_React$Component) {
  _inherits(TransitionContext, _React$Component);

  function TransitionContext() {
    _classCallCheck(this, TransitionContext);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  TransitionContext.prototype.getChildContext = function getChildContext() {
    return {
      transitionRouter: {
        config: this.props.transitionConfig,
        dismiss: this.dismiss.bind(this),
        show: this.show.bind(this),
        swap: this.swap.bind(this),
        getLocationIndex: this.getLocationIndex.bind(this)
      }
    };
  };

  TransitionContext.prototype.componentWillMount = function componentWillMount() {
    // Keep an history of all keys to be able to determine if we go forward
    // or backward in the history
    this.locationKeys = [this.props.location.key];
  };

  TransitionContext.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var nextLocation = nextProps.location;

    var locationIndex = this.getLocationIndex();

    if (nextLocation.action === _HistoryActions.PUSH) {
      this.locationKeys = [].concat(this.locationKeys.slice(0, locationIndex + 1), [nextLocation.key]);
    } else if (nextLocation.action === _HistoryActions.REPLACE) {
      this.locationKeys[locationIndex] = nextLocation.key;
    }
  };

  /**
   * Dismiss current location.
   * By default it's a goBack, we use the location only if we don't have
   * any history.
   *
   * @param {object} location
   * @param {object} options
   */


  TransitionContext.prototype.dismiss = function dismiss(location) {
    var _this2 = this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _options$depth = options.depth,
        depth = _options$depth === undefined ? 1 : _options$depth;


    var goBackDepth = Math.min(this.getLocationIndex(), depth);
    var goBackUnreachable = depth - this.getLocationIndex();

    if (goBackDepth > 0) {
      this.props.router.go(-goBackDepth);
    }

    // We run the swap asynchronously as we need history to update his internal state.
    setTimeout(function () {
      if (goBackUnreachable > 0) {
        location = (0, _LocationUtils.createLocation)(location);
        _this2.swap(location, _TransitionActions.DISMISS);
      }
    }, 0);
  };

  /**
   * Show a location.
   * It's basically a simple push.
   *
   * @param {object} location
   */


  TransitionContext.prototype.show = function show(location) {
    this.props.router.push(location);
  };

  /**
   * Swap to a location.
   * Location are merged and the current location is replaced by the new one.
   *
   * @param {object} location
   * @param {string} transitionAction
   */


  TransitionContext.prototype.swap = function swap(location, transitionAction) {
    location = (0, _LocationUtils.createLocation)(location);
    location = (0, _LocationUtils.mergeLocations)(this.props.location, location);

    if (transitionAction) {
      location.state = _extends({}, location.state, {
        transitionAction: transitionAction
      });
    }

    delete location.key;

    this.props.router.replace(location);
  };

  /**
   * Returns the index of a location.
   * By default it will return the index of the current location.
   *
   * @param {object} [location=this.props.location]
   */


  TransitionContext.prototype.getLocationIndex = function getLocationIndex() {
    var location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.location;

    return this.locationKeys.indexOf(location.key);
  };

  TransitionContext.prototype.render = function render() {
    var children = this.props.children;

    return children;
  };

  return TransitionContext;
}(_react2.default.Component);

TransitionContext.propTypes = {
  transitionConfig: _react.PropTypes.shape({
    defaultTransition: _react.PropTypes.object,
    TransitionGroup: _react.PropTypes.func,
    onShow: _react.PropTypes.func,
    onDismiss: _react.PropTypes.func,
    getComponentKey: _react.PropTypes.func
  }).isRequired,
  location: _react.PropTypes.object.isRequired,
  router: _react.PropTypes.object.isRequired,
  children: _react.PropTypes.element.isRequired
};
TransitionContext.childContextTypes = {
  transitionRouter: _react.PropTypes.object.isRequired
};
exports.default = TransitionContext;