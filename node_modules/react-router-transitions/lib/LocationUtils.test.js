'use strict';

var _chai = require('chai');

var _LocationUtils = require('./LocationUtils');

describe('LocationUtils', function () {
  describe('#createLocation', function () {
    describe('without location', function () {
      it('should return an object', function () {
        (0, _chai.expect)((0, _LocationUtils.createLocation)(), 'createLocation() should return an object').to.eql({});
      });
    });

    describe('with a string', function () {
      it('should return an object with "pathname"', function () {
        (0, _chai.expect)((0, _LocationUtils.createLocation)('/my/path'), 'createLocation() should return an object').to.eql({
          pathname: '/my/path'
        });
      });
    });

    describe('with an object', function () {
      it('should return it', function () {
        (0, _chai.expect)((0, _LocationUtils.createLocation)({
          pathname: '/my/path'
        }), 'createLocation() should return an object').to.eql({
          pathname: '/my/path'
        });
      });
    });
  });

  describe('#mergeLocations', function () {
    describe('without argument', function () {
      it('should return an object', function () {
        (0, _chai.expect)((0, _LocationUtils.mergeLocations)(), 'mergeLocations() should return an object').to.eql({});
      });
    });

    describe('with one location', function () {
      it('should clone location', function () {
        var location = {
          pathname: '/my/path',
          state: {
            id: 23
          }
        };

        var result = (0, _LocationUtils.mergeLocations)(location);

        (0, _chai.expect)(result, 'mergeLocations() should clone location').to.not.equal(location);
        (0, _chai.expect)(result, 'mergeLocations() should clone location').to.eql(location);
      });
    });

    describe('with several locations', function () {
      describe('without state', function () {
        it('should merge them', function () {
          var location1 = { pathname: '/my/path1' };
          var location2 = { pathname: '/my/path2' };

          var result = (0, _LocationUtils.mergeLocations)(location1, location2);

          (0, _chai.expect)(result, 'mergeLocations() should merge locations').to.eql({
            pathname: '/my/path2'
          });
        });
      });

      describe('with state', function () {
        it('should merge state', function () {
          var location1 = {
            state: {
              foo: 'bar'
            }
          };

          var location2 = {
            state: {
              bar: 'foo'
            }
          };

          var result = (0, _LocationUtils.mergeLocations)(location1, location2);

          (0, _chai.expect)(result, 'mergeLocations() should merge location states').to.eql({
            state: {
              foo: 'bar',
              bar: 'foo'
            }
          });
        });
      });
    });
  });
});