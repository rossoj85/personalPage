'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RouterUtils = require('./RouterUtils');

var _TransitionActions = require('./TransitionActions');

var _activeState = require('./activeState');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaultGetComponentKey = function defaultGetComponentKey(child, _ref) {
  var routes = _ref.routes;

  return (0, _RouterUtils.getRoutePath)(child.props.route, routes);
};

exports.default = function (Component, transitionConfig) {
  var _class, _temp;

  return _temp = _class = function (_React$Component) {
    _inherits(Transition, _React$Component);

    function Transition() {
      _classCallCheck(this, Transition);

      return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
    }

    Transition.prototype.componentWillMount = function componentWillMount() {
      this.config = _extends({}, this.context.transitionRouter.config, transitionConfig);
      this.state = {
        transition: this.config.defaultTransition
      };
    };

    Transition.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      this.setState({
        transition: this.getTransition(this.props, nextProps)
      });
    };

    /**
     * Determine transition to apply.
     *
     * @param {object} props
     * @param {object} nextProps
     * @returns {object}
     */


    Transition.prototype.getTransition = function getTransition(props, nextProps) {
      if (!(0, _activeState.areTransitionsEnabled)()) {
        return { transition: 'instant' };
      }

      var transitionType = this.getTransitionType(props.location, nextProps.location);
      switch (transitionType) {
        case _TransitionActions.SHOW:
          return this.getShowTransition(props, nextProps);
        case _TransitionActions.DISMISS:
          return this.getDismissTransition(props, nextProps);
        default:
          return this.config.defaultTransition;
      }
    };

    /**
     * Get show transition.
     * Retrieve transition from hook or from location state.
     *
     * @param {object} props
     * @param {object} nextProps
     */


    Transition.prototype.getShowTransition = function getShowTransition(props, nextProps) {
      var transition = this.callHook('onShow', props, nextProps);

      return transition || this.extractStateFromLocation(nextProps.location).showTransition;
    };

    /**
     * Get dismiss transition.
     * Retrieve transition from hook or from location state.
     *
     * @param {object} props
     * @param {object} nextProps
     */


    Transition.prototype.getDismissTransition = function getDismissTransition(props, nextProps) {
      var transition = this.callHook('onDismiss', props, nextProps);

      return transition || this.extractStateFromLocation(props.location).dismissTransition;
    };

    /**
     * Call hook.
     *
     * @param {string} name
     * @param {object} props
     * @param {object} nextProps
     */


    Transition.prototype.callHook = function callHook(name, props, nextProps) {
      var replaceTransition = void 0;

      function replace(transition) {
        replaceTransition = transition;
      }

      // Call hook if it's defined.
      if (this.config[name]) this.config[name].call(this, props, nextProps, replace);

      return replaceTransition;
    };

    /**
     * Determine transition type to apply from current and nextLocation.
     *
     * @param {object} location
     * @param {object} nextLocation
     * @returns {string|null}
     */


    Transition.prototype.getTransitionType = function getTransitionType(location, nextLocation) {
      var getLocationIndex = this.context.transitionRouter.getLocationIndex;

      var locationIndex = getLocationIndex(location);
      var nextLocationIndex = getLocationIndex(nextLocation);

      // Custom action
      if (nextLocation.state && (nextLocation.state.transitionAction === _TransitionActions.SHOW || nextLocation.state.transitionAction === _TransitionActions.DISMISS)) {
        return nextLocation.state.transitionAction;
      }

      // Push
      if (locationIndex >= 0 && nextLocationIndex === locationIndex + 1) {
        return _TransitionActions.SHOW;
      }

      // Go back or explicit dismiss (first action on refresh)
      if (locationIndex >= 0 && nextLocationIndex <= locationIndex - 1) {
        return _TransitionActions.DISMISS;
      }

      return null;
    };

    /**
     * Extract state from location.
     *
     * @param {object} location
     * @returns {object}
     */


    Transition.prototype.extractStateFromLocation = function extractStateFromLocation(location) {
      var defaultTransition = this.config.defaultTransition;

      var _ref2 = location.state || {},
          _ref2$showTransition = _ref2.showTransition,
          showTransition = _ref2$showTransition === undefined ? defaultTransition : _ref2$showTransition,
          _ref2$dismissTransiti = _ref2.dismissTransition,
          dismissTransition = _ref2$dismissTransiti === undefined ? defaultTransition : _ref2$dismissTransiti;

      return { dismissTransition: dismissTransition, showTransition: showTransition };
    };

    Transition.prototype.render = function render() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          props = _objectWithoutProperties(_props, ['children']);

      var _config = this.config,
          TransitionGroup = _config.TransitionGroup,
          _config$getComponentK = _config.getComponentKey,
          getComponentKey = _config$getComponentK === undefined ? defaultGetComponentKey : _config$getComponentK;


      return _react2.default.createElement(
        Component,
        props,
        _react2.default.createElement(
          TransitionGroup,
          this.state.transition,
          _react.Children.map(children, function (child) {
            return (0, _react.isValidElement)(child) ? (0, _react.cloneElement)(child, { key: getComponentKey(child, _this2.props) }) : null;
          })
        )
      );
    };

    return Transition;
  }(_react2.default.Component), _class.propTypes = {
    location: _react.PropTypes.object.isRequired,
    children: _react.PropTypes.node
  }, _class.contextTypes = {
    transitionRouter: _react.PropTypes.object.isRequired
  }, _temp;
};