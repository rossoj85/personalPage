'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Merge locations recursively.
 *
 * @param {[]object} ...locations
 * @returns {object}
 */
var mergeLocations = exports.mergeLocations = function mergeLocations() {
  for (var _len = arguments.length, locations = Array(_len), _key = 0; _key < _len; _key++) {
    locations[_key] = arguments[_key];
  }

  return locations.reduce(function (res, loc) {
    var newRes = _extends({}, res, loc);

    if (loc.state) {
      newRes.state = _extends({}, res.state, loc.state);
    }

    return newRes;
  }, {});
};

/**
 * Create a location from a string or an object.
 *
 * @param {string|object} location
 * @returns {object}
 */
var createLocation = exports.createLocation = function createLocation(location) {
  if (typeof location === 'string') {
    return { pathname: location };
  }

  return location || {};
};